# Setup the Jupyter version of Dash
#from jupyter_dash import JupyterDash
from dash import Dash


# Configure the necessary Python module imports for dashboard components
import dash_leaflet as dl
from dash import dcc
from dash import html
import plotly.express as px
from dash import dash_table
from dash.dependencies import Input, Output, State
import base64

# Configure OS routines
import os

# Configure the plotting routines
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


#### FIXED #####
# change animal_shelter and AnimalShelter to match your CRUD Python module file name and class name
from AnimalShelter import AnimalShelter

###########################
# Data Manipulation / Model
###########################


username = "aacuser"
password = "SNHU1234"

# Connect to database via CRUD Module
db = AnimalShelter()

# class read method must support return of list object and accept projection json input
# sending the read method an empty document requests all documents be returned
df = pd.DataFrame.from_records(db.read({}))

# MongoDB v5+ is going to return the '_id' column and that is going to have an 
# invlaid object type of 'ObjectID' - which will cause the data_table to crash - so we remove
# it in the dataframe here. The df.drop command allows us to drop the column. If we do not set
# inplace=True - it will reeturn a new dataframe that does not contain the dropped column(s)
df.drop(columns=['_id'],inplace=True)

## Debug
# print(len(df.to_dict(orient='records')))
# print(df.columns)


#########################
# Dashboard Layout / View
#########################
#app = JupyterDash(__name__)
app = Dash(__name__)


#FIXED Add in Grazioso Salvareâ€™s logo
image_filename = 'GraziosoSalvareLogo.png' # replace with your own image
encoded_image = base64.b64encode(open(image_filename, 'rb').read())



#FIX ME Place the HTML image tag in the line below into the app.layout code according to your design
#FIX ME Also remember to include a unique identifier such as your name or date
#html.Img(src='data:image/png;base64,{}'.format(encoded_image.decode()))

app.layout = html.Div([
    html.Center(html.B(html.H1('Zachary Abbes CS-340 Dashboard'))),
    html.Center(html.A(html.Img(src='data:image/png;base64,{}'.format(encoded_image.decode())), href='http://snhu.edu')),
    html.Center(html.Div([
        html.Label("Click to open the dashboard in a browser: "),
        html.A("Open Dashboard", href="http://127.0.0.1:8050", target="_blank", style={"color": "blue", "text-decoration": "underline"})
    ])),
    html.Hr(),
    html.Div([
        html.Label('Select Rescue Type:'),
        dcc.Dropdown(
            id = 'filter-type',
            options = [
                {'label': 'Reset (Show All Animals)', 'value': 'reset'},
                {'label': 'Water Rescue', 'value': 'water_rescue'},
                {'label': 'Mountain/Wilderness Rescue', 'value': 'mountain_wilderness_rescue'},
                {'label': 'Urban Search and Rescue (USAR)', 'value': 'usar_rescue'},
                {'label': 'Avalanche Rescue', 'value': 'avalanche_rescue'},
                {'label': 'Scent-Specific Trailing', 'value': 'trailing_rescue'}
            ],
            value='NULL',
        )
        #dcc.RadioItems(
        #id='filter-type',
       # options=[
       #     {'label': 'Water Rescue', 'value': 'water_rescue'},
       #     {'label': 'Mountain or Wilderness Rescue', 'value': 'mountain_wilderness_rescue'},
       #     {'label': 'Disaster or Individual Tracking', 'value': 'disaster_individual_tracking'},
       #     {'label': 'Reset', 'value': 'reset'}
      #  ],
      #      value = 'NULL',
       #     labelStyle={'display': 'inline-block'})
            
        
        
#FIXED Add in code for the interactive filtering options. For example, Radio buttons, drop down, checkboxes, etc.

    ]),
    html.Hr(),
    dash_table.DataTable(id='datatable-id',
                         columns=[{"name": i, "id": i, "deletable": False, "selectable": True} for i in df.columns],
                         data=df.to_dict('records'),
                         editable=False,
                         filter_action="native",
                         sort_action = "native",
                         sort_mode="multi",
                         column_selectable = "single",
                         row_selectable = "single",
                         row_deletable=False,
                         selected_columns=[],
                         selected_rows=[0],
                         page_action="native",
                         page_current=0,
                         page_size=10,
                         style_table={'overflowX': 'auto'},
                         
#FIXED: Set up the features for your interactive data table to make it user-friendly for your client
#If you completed the Module Six Assignment, you can copy in the code you created here 

                        ),
    html.Br(),
    html.Hr(),
#This sets up the dashboard so that your chart and your geolocation chart are side-by-side
    html.Div(className='row',
         style={'display' : 'flex'},
             children=[
        html.Div(
            id='graph-id',
            className='col s12 m6',

            ),
        html.Div(
            id='map-id',
            className='col s12 m6',
            )
        ])
])

#############################################
# Interaction Between Components / Controller
#############################################



    
@app.callback(Output('datatable-id','data'),
              [Input('filter-type', 'value')])
def update_dashboard(filter_type):
## FIXED Add code to filter interactive data table with MongoDB queries
    query={}
    if filter_type =='water_rescue':
        query = {"animal_type": "Dog", "breed": {"$in": ["Labrador Retriever", "Newfoundland", "Chesa Bay Retr"]}}
        
    elif filter_type == 'mountain_wilderness_rescue':
        query = {"animal_type": "Dog", "breed": {"$in": ["German Shepherd", "Alaskan Malamute", "Old English Sheepdog", "Siberian Husky", "Rottweiler"]}}
    
    elif filter_type =='disaster_individual_tracking':
        query = {"animal_type": "Dog", "breed": {"$in": ["Doberman Pinsch", "German Shepherd", "Golden Retriever", "Bloodhound", "Rottweiler"]}}
        
    elif filter_type == 'usar_rescue':
        query = {"animal_type": "Dog", "breed": {"$in": ["German Shepherd", "Belgian Malinois", "Labrador Retriever", "Golden Retriever", "Border Collie", "Australian Shepherd"]}}

    elif filter_type == 'avalanche_rescue':
        query = {"animal_type": "Dog", "breed": {"$in": ["St. Bernard", "Golden Retriever", "German Shepherd", "Labrador Retriever", "Border Collie"]}}

    elif filter_type == 'trailing_rescue':
        query = {"animal_type": "Dog", "breed": {"$in": ["Bloodhound", "Beagle", "German Shepherd", "Coonhound", "Basset Hound"]}}

    elif filter_type == 'reset':
        pass
    
    data = pd.DataFrame.from_records(db.read(query))
    if '_id' in data.columns:
        data.drop(columns=['_id'], inplace=True)
    #columns=[{"name": i, "id": i, "deletable": False, "selectable": True} for i in df.columns]
    return data.to_dict('records')
#       
#       
    
# Changed from a Pie chart, to a Bar chart that shows the total quantity of animals per the filter.
# Display the breeds of animal based on quantity represented in
# the data table
@app.callback(
    Output('graph-id', "children"),
    [Input('datatable-id', "derived_virtual_data")])

def update_graphs(viewData):
    if viewData is None or len(viewData) == 0:
        return html.Div("There is no data available to display")

    dff = pd.DataFrame.from_dict(viewData)

    #count the occurences of each breed 
    breed_counts = dff['breed'].value_counts().reset_index()
    breed_counts.columns = ['breed' , 'count']

    #create a horizontal bar chart
    fig = px.bar(
        breed_counts.head(20), #display the top 20 results
        x = 'count',
        y = 'breed',
        orientation = 'h',
        title = 'Breed Distrubtion',
        labels = {'count': 'Number of Animals', 'breed': 'Breed'}
    )
    #sort the chart from most to least common of the results
    fig.update_layout(yaxis = {'categoryorder' :  'total ascending'})
    return[
        dcc.Graph(figure = fig)
    ]
                      
    ###FIXED ####
    # add code for chart of your choice (e.g. pie chart) #
  #  if viewData is None or len(viewData) == 0:
   #     return html.Div("There is no data available to display.")
    #dff = pd.DataFrame.from_dict(viewData)
    #fig = px.pie(dff, names='breed', title='Preferred Animals')
    
    #return [
     #   dcc.Graph(            
      #      figure = px.pie(dff, names='breed', title='Preferred Animals')
       # )    
    #]
    
#This callback will highlight a cell on the data table when the user selects it
@app.callback(
    Output('datatable-id', 'style_data_conditional'),
    [Input('datatable-id', 'selected_columns')]
)
def update_styles(selected_columns):
    return [{
        'if': { 'column_id': i },
        'background_color': '#D2F3FF'
    } for i in selected_columns]


# This callback will update the geo-location chart for the selected data entry
# derived_virtual_data will be the set of data available from the datatable in the form of 
# a dictionary.
# derived_virtual_selected_rows will be the selected row(s) in the table in the form of
# a list. For this application, we are only permitting single row selection so there is only
# one value in the list.
# The iloc method allows for a row, column notation to pull data from the datatable
@app.callback(
    Output('map-id', "children"),
    [Input('datatable-id', "derived_virtual_data"),
     Input('datatable-id', "derived_virtual_selected_rows")])
def update_map(viewData, index):  
    if viewData is None:
        return
    elif index is None:
        return
    
    dff = pd.DataFrame.from_dict(viewData)
    # Because we only allow single row selection, the list can be converted to a row index here
    if index is None:
        row = 0
    else: 
        row = index[0]
        
    # Austin TX is at [30.75,-97.48]
    return [
        dl.Map(style={'width': '1000px', 'height': '500px'}, center=[30.75,-97.48], zoom=10, children=[
            dl.TileLayer(id="base-layer-id"),
            # Marker with tool tip and popup
            # Column 13 and 14 define the grid-coordinates for the map
            # Column 4 defines the breed for the animal
            # Column 9 defines the name of the animal
            dl.Marker(position=[dff.iloc[row,13],dff.iloc[row,14]], children=[
                dl.Tooltip(dff.iloc[row,4]),
                dl.Popup([
                    html.H1("Animal Name"),
                    html.P(dff.iloc[row,9])
                ])
            ])
        ])
    ]


if __name__ == '__main__':
    #app.run(debug=True)
    app.run(debug=True)

